-- Paulo Trigo Silva


=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====
-- descarregar e instalar o Git
http://git-scm.com/downloads
(escolher sistema operativo e seguir instruções de instalação)

=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====
abrir uma janela para execução de comandos de linha
=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====

-- configurar após instalação (substituir pelo "userName" e "email" adequado)
-- instruções (Git) para executar em "comando de linha"
git config --global user.name "Paulo Trigo"
git config --global user.email "ptrigo.silva@gmail.com"
=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====


=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====
-- ir para pasta onde ficarão os documentos para os quais se vão gerir versões
-- (eventualmente criar uma nova pasta)
-- ir para essa pasta (cd pasta) e executar, nessa pasta, estas instruções
-- algumas instruções aqui indicadas pertencem ao Linux mas têm o equivalente
-- nos outros sistemas (e.g., "rm -rf x" do Linux é "rmdir /s/q x" no Windows) 
=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====


-- eliminar eventual repositório anterior
rm -rf .git

-- iniciar repositório
git init

-- editar ficheiros
echo "um exemplo" > f1.txt 
echo "outro exemplo" > f2.txt  

-- adicionar à "staging area"
git add f1.txt 
git add f2.txt 

-- ver estado do repositório
git status
# On branch master
# Initial commit
# Changes to be committed:
#   (use "git rm --cached <file>..." to unstage)
#	new file:   f1.txt
#	new file:   f2.txt


-- registar (commit) uma versão
git commit -m "v00 - o meu primeiro commit"

-- continuar a trabalhar na "working directory"
echo "um exemplo COM MAIS ESTA LINHA" >> f1.txt

-- registar (commit) outra versão
git commit -a -m "v01 - o meu segundo commit"

-- obter chave de cada versão
git log --pretty=oneline

449f7adf3157bf5cd626a7302c748dcf7d51906e v01 - o meu segundo commit
4d2f1c4276052d633453ad4a3bf49a3ef9f0f825 v00 - o meu primeiro commit

-- recuperar uma versão
git checkout 4d2f1c4276052d633453ad4a3bf49a3ef9f0f825

-- verificar o conteúdo do ficheiro alterado na segunda versão
more t1.txt


=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====
-- construir um ramo a partir da versão "manter" actual
git checkout master

-- ver que ramos existem e qual o ramo actual
git branch -v

-- criar novo ramo
git branch testesAdHoc

-- passar para outro ramo
git checkout testesAdHoc

-- ver que ramos existem e qual o ramo actual
git branch -v

-- alterar o novo ramo trabalhando na "working directory"
echo "um exemplo NO RAMO testesAdHoc" >> f1.txt

-- commit da nova versão neste ramo
git commit -a -m "v01.t - primeiro commit testesAdHoc"

-- obter info sobre os commit
git log --pretty=oneline

4bf112d359dca315fe4e2e13fe91ce1e73b2cf2d v01.teste - primeiro commit testesAdHoc
449f7adf3157bf5cd626a7302c748dcf7d51906e v01 - o meu segundo commit
4d2f1c4276052d633453ad4a3bf49a3ef9f0f825 v00 - o meu primeiro commit

--- emendar a mensagem usada no último commmit efectuado
git commit --amend -m "v01.t - teste ao input"

-- obter info sobre os commit
git log --pretty=oneline

26a977634ba7e99502b2206ac4138c7369eaa55b v01.t - teste ao input
449f7adf3157bf5cd626a7302c748dcf7d51906e v01 - o meu segundo commit
4d2f1c4276052d633453ad4a3bf49a3ef9f0f825 v00 - o meu primeiro commit

-- voltar ao ramo "manter"
git checkout master

-- obter info sobre os commit
git log --pretty=oneline

449f7adf3157bf5cd626a7302c748dcf7d51906e v01 - o meu segundo commit
4d2f1c4276052d633453ad4a3bf49a3ef9f0f825 v00 - o meu primeiro commit


=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====
-- alterar o ramo trabalhando na "working directory"
echo "um exemplo que no RAMO MASTER DIVERGE" >> f1.txt 

-- commit da nova versão neste ramo
git commit -a -m "v02 - diverge master"

-- obter info sobre os commit
git log --pretty=oneline

2776a4e63253e40632021b53c28ec60a9effca82 v02 - diverge master
449f7adf3157bf5cd626a7302c748dcf7d51906e v01 - o meu segundo commit
4d2f1c4276052d633453ad4a3bf49a3ef9f0f825 v00 - o meu primeiro commit

-- comparar com o outro ramo
git checkout testesAdHoc
git log --pretty=oneline

26a977634ba7e99502b2206ac4138c7369eaa55b v01.t - teste ao input
449f7adf3157bf5cd626a7302c748dcf7d51906e v01 - o meu segundo commit
4d2f1c4276052d633453ad4a3bf49a3ef9f0f825 v00 - o meu primeiro commit


=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====
-- fazer junção com o ramo "manter"
git merge master

Auto-merging f1.txt
CONFLICT (content): Merge conflict in f1.txt
Automatic merge failed; fix conflicts and then commit the result.


-- para saber quais os ficheiros com este tipo de conflito
git status

# On branch testesAdHoc
# You have unmerged paths.
#   (fix conflicts and run "git commit")
#
# Unmerged paths:
#   (use "git add <file>..." to mark resolution)
#
#	both modified:      f1.txt
#
no changes added to commit (use "git add" and/or "git commit -a")

-- ver os marcadores colocados pelo Git no(s) ficheiro(s) com conflito
more f1.txt

um exemplo
um exemplo COM MAIS ESTA LINHA
<<<<<<< HEAD
um exemplo NO RAMO testesAdHoc
=======
um exemplo que no RAMO MASTER DIVERGE
>>>>>>> master

-- usar uma ferramenta de apoio à resolução de conditos
git mergetool

-- consolideer a junção de ramos
git add f1.txt
git commit

-- ver o log
git log --pretty=oneline

9e561408e5991f8b47129d02f4256971f2d96bcf Merge branch 'master' into testesAdHoc
2776a4e63253e40632021b53c28ec60a9effca82 v02 - diverge master
26a977634ba7e99502b2206ac4138c7369eaa55b v01.t - teste ao input
449f7adf3157bf5cd626a7302c748dcf7d51906e v01 - o meu segundo commit
4d2f1c4276052d633453ad4a3bf49a3ef9f0f825 v00 - o meu primeiro commit


=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====
-- agora vamos tratar a comunicação entre repositórios
=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====


=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====
-- protocolo "local"
=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====
-- criar uma pasta na DropBox (ou Google Drive)
-- vamos fazer para a DropBox mas para a GoogleDrive é igual

cd ~/Dropbox
mkdir _Git

-- na pasta da DropBox (ou Google Drive)
-- cria um repositório Git sem "working directory" (i.e., --bare) de nome "projetoA.git"
git init --bare projetoA.git


-- na pasta de trabalho
-- adicionar a indicação da existência de pasta remota
git remote remove db
git remote add db ~/Dropbox/_Git/projetoA.git

-- fazer réplica completa
git clone --bare . ~/Dropbox/_Git/projetoA.git

-- copiar o ramo "master" e "testesAdHoc" para a pasta na DropBox
git push db master
git push db testesAdHoc

-- ver mais informação sobre o repositório
git remote show db

-- obter versão remota
git fetch db master
git pull db testesAdHoc


=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====
-- protocolo "HTTP"
=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====
-- link gerado no GitHub
https://github.com/paulo-trigo/teste_Git.git

-- registar localmente o repositorio no GitHub (e dar-lhe nome "gh")
git remote add gh https://github.com/paulo-trigo/teste_Git.git

-- registar os ramos no GitHub
git push gh master
git push gh testesAdHoc

-- consolidar "manter" com as últimas actualizações no GitHub
git pull gh master

-- ver os "commit"
git log --pretty=oneline

62393cd00635ad71e0274bbcf526fdb4a822dd9f Merge branch 'master' of https://github.co
cbc15985ff730ee1c963be190f186b6c50d71df9 vGitHub
9e561408e5991f8b47129d02f4256971f2d96bcf Merge branch 'master' into testesAdHoc
2776a4e63253e40632021b53c28ec60a9effca82 v02 - diverge master
26a977634ba7e99502b2206ac4138c7369eaa55b v01.t - teste ao input
449f7adf3157bf5cd626a7302c748dcf7d51906e v01 - o meu segundo commit
4d2f1c4276052d633453ad4a3bf49a3ef9f0f825 v00 - o meu primeiro commit


=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====
-- associar étiqueta (tag) a versão consolidada
=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====//\\=====

git log --pretty=oneline

62393cd00635ad71e0274bbcf526fdb4a822dd9f Merge branch 'master' of https://github.com/paulo-
cbc15985ff730ee1c963be190f186b6c50d71df9 vGitHub
9e561408e5991f8b47129d02f4256971f2d96bcf Merge branch 'master' into testesAdHoc
2776a4e63253e40632021b53c28ec60a9effca82 v02 - diverge master
26a977634ba7e99502b2206ac4138c7369eaa55b v01.t - teste ao input
449f7adf3157bf5cd626a7302c748dcf7d51906e v01 - o meu segundo commit
4d2f1c4276052d633453ad4a3bf49a3ef9f0f825 v00 - o meu primeiro commit

-- criar uma tag
git tag -a tag_v00 -m "tagging" 4d2f1c4276052d633453ad4a3bf49a3ef9f0f825

-- ver que tas existem
git tag

-- obter a versão correspondente a determinada tag
git checkout tag_v00


